又看见一篇好文，马上打包
;:+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;:文档来源： http://www.rayninfo.co.uk/vimtips.html 
;:翻译参考： 没有记，请原作者见谅 
;:文档日期： 2006-10-13 11:19:04 
;:更新记录： 
;:作　　者： li3 
;:生成工具： 2Html.vim 
;:blog.asp?name=li3 
;:+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;:--------------------------------------------------------------------------------
;:如果你使用的是MS-Windows,可能有的键已经被定义为Windows中的一些默认功能键。如果不
;:想这样，请编辑$VIM\mswin.vim
;:--------------------------------------------------------------------------------
/joe/e ;: 设置光标到匹配"joe"的末尾
/joe/e+1 ;: 设置光标到匹配"joe"的末尾再后移一位
/joe/s-2 ;: 设置光标到匹配"joe“的开头再前移两位
/joe/+3 ;: 搜索“joe” 找到后将光标下移3行
/^joe.*fred.*bill/ ;: 匹配以'j'开头且"joe"到"fred"到"bill"之间至少有一个字符
/^[A-J]\+/ ;: 搜索行首非'A'到’J‘重复一次以上的行
/begin\_.*end ;: 多行匹配
/fred\_s*joe/i ;: 多行搜索可以是任何空白字符包括\n,\t等等
/fred\|joe ;: 搜索fred或者joe
/.*fred\&.*joe ;: 搜索同时包括fred跟joe的行
/\<fred\>/i ;: 搜索独立的单词fred
/\<\d\d\d\d\> ;: 搜索独立的4位数字
/\D\d\d\d\d\D ;: 搜索恰好4位的数字
/\<\d\\> ;: 同/\<\d\d\d\d\>
/\([^0-9]\|^\)%.*% ;: 查找以非0~9数字或在行首的%%所包括的内容 
;:" 查找空行
/^\n\ ;: 匹配三连续的空行
;:" 使用正则表达式组查找
/\(fred\).*\(joe\).*\2.*\1
;:" 正则表达式重复
/^\([^,]*,\)\
;:" visual 下搜索 
:vmap // y/<C-R>"<CR> ;: visually模式下的键盘映射，把//映射成匹配当前选中的文本
:vmap <silent> // y/<C-R>=escape(@",'\\/.*$^~[]')<CR><CR> ;: 包括空白字符
;:" \zs 和 \ze 匹配原 :h /\zs
/<\zs[^>]*\ze> ;: 匹配<与>所包含的内容
;:" 零宽度匹配 :h /\@=
/<\@<=[^>]*>\@= ;: 查找<与>所包含的内容
/<\@<=\_[^>]*>\@= ;: 多行匹配<与>所包含的内容
;:" 多行查找 \_ 的意思是包括换行符
/<!--\_p\--> ;: 匹配<与>所包含的所有内容
/fred\_s*joe/i ;: 匹配fred开始到joe，之间一定得是空白字符
/bugs\(\_.\)*bunny ;: 匹配所有bugs到bunny的字符串
:h \_ ;: help
;:" 查找函数声明，nmap为normal模式下的键盘映射
:nmap gx yiw/^\(sub\<bar>function\)\s\+<C-R>"<CR>
;:" 查找多个文件
:bufdo /searchstr/ ;: 在多个文件缓冲区里执行查找
;:" 更好的多文件查找定位方法
:bufdo %s/searchstr/&/gic ;: 在多个文件缓冲区里查找，按下n停止
;:" 怎样不使用 / 来查找网址
?http://www.vim.org/ ;: 向后查找
;:" 查找指定字符以外的字符串
/\c\v([^aeiou]&\a) ;: 查找4个辅音字母
;:-----------------------------------------------------------------------------
;:#替换
:%s/fred/joe/igc ;: 普通替换命令
:%s/\r//g ;: 删除 DOS 的换行符 ^M
;:" 你的文本文件是否乱七八糟的排成一行？使用如下命令
:%s/\r/\r/g ;: 转换 DOS 回车符 ^M 为真正的回车符
:%s= *$== ;: 删除行尾空白
:%s= \+$== ;: 同上
:%s#\s*\r\?$## ;: 删除尾部空白和dos换行符
:%s#\s*\r*$## ;: 同上
;:" 删除空行
:%s/^\n\// ;: 删除连续3个空行
:%s/^\n\+/\r/ ;: 压缩空行，多个替换为一个
:%s#<[^>]\+>##g ;: 删除html的tag部分
:%s#<\_.\>##g ;: 多行删除 html 的tags (非贪婪方式)
;:" IF YOU ONLY WANT TO KNOW ONE THING
:'a,'bg/fred/s/dick/joe/igc ;: 非常有用 
;# 译释：''a,''b指定一个范围：mark a ~ mark b
;# g//用一个正则表达式指出了进行操作的行必须可以被fred匹配
;# 看后面，g//是一个全局显示命令
;# s/dick/joe/igc则对于这些满足条件的行进行替换
;:" 复制列
:%s= [^ ]\+$=&&= ;: 复制最后一列
:%s= \f\+$=&&= ;: 复制最后一列
:%s= \S\+$=&& ;: 复制最后一列
;:" 记忆（反向引用）
:s/\(.*\):\(.*\)/\2: \1/ ;: 将两个字段颠倒
:%s/^\(.*\)\n\1$/\1/ ;: 删除重复行
;:" 非贪婪匹配 \
:%s/^.\pdf/new.pdf/ ;: 删除第一个pdf
;:" use of optional atom \?
:%s#\<[zy]\?tbl_[a-z_]\+\>#\L&#gc ;: lowercase with optional leading characters
;:" 跨越尽量多的行
:%s/<!--\_.\-->// ;: 删除多行注释
:help /\ ;: 查看非贪婪匹配的更多帮助
;:" 使用寄存器替换
:s/fred/<c-r>a/g ;: 将fred替换为寄存器a里的内容 #<c-r>为按下Ctrl与r
:s/fred/<c-r>asome_text<c-r>s/g
:s/fred/\=@a/g ;: 比较好的办法，不显示替换内容 
;:" 在一行里写多种命令
:%s/\f\+\.gif\>/\r&\r/g | v/\.gif$/d| %s/gif/jpg/
:%s/a/but/gie|:update|:next ;: 当使用 @: 来重复
;:" 或运算
:%s/suck\|buck/loopy/gc ;: 替换suck或者buck（这里|不是管道）
;:" 调用vim函数
:s/__date__/\=strftime("%c")/ ;: 将__date__替换成当前日期，使用strftime函数
;:" 处理列，替换所有在第三列中的str1
:%s:\(\(\w\+\s\+\)\\)str1:\1str2:
;:" 交换第一列跟第四列
:%s:\(\w\+\)\(.*\s\+\)\(\w\+\)$:\3\2\1:
;:" 过滤form中的内容放在寄存器里
:redir @*|sil exec 'g#<\(input\|select\|textarea\|/\=form\)\>#p'|redir END
:nmap ,z :redir @*<Bar>sil exec 'g@<\(input\<Bar>select\<Bar>textarea\<Bar>/\=form\)\>@p'<Bar>redir END<CR>
;:" 两位以上的数字减三（带进位。这个命令挺有趣）
:%s/\d\+/\=(submatch(0)-3)/
;:" 包含loc或者functions的行中的数字加6
:g/loc\|function/s/\d/\=submatch(0)+6/
;:" 比上面更好的方法
:%s#txtdev\zs\d#\=submatch(0)+1#g
:h /\zs ;查看帮助
;:" 前缀为gg的数字加6
:%s/\(gg\)\@<=\d\+/\=submatch(0)+6/
:h zero-width ;查看帮助
;:" 替换一个特定字符串为数字
:let i=10 | 'a,'bg/Abc/s/yy/\=i/ |let i=i+1 ;# 将yy转换成10，11，12等等
;:" 比上面的更精确
:let i=10 | 'a,'bg/Abc/s/xx\zsyy\ze/\=i/ |let i=i+1 # 将xxyy 转换成 xx11,xx12,xx13
;:" 将查找内容放入内存，然后用\zs进行简单替换 
:%s/"\([^.]\+\).*\zsxx/\1/
;:" 将xx替换为此行内容 
:nmap <leader>z :%s#\<<c-r>=expand("<cword>")<cr>\>#
;:" 将Vis选中的内容用<>括起来 
:vmap <leader>z :<C-U>%s/\<<c-r>*\>/
;:-----------------------------------------------------------------------------
;:" 下面举一些在替换中使用替换的例子 
;:" 多种分符可以被用在替换中 
:%s,\(all/.*\)\@<=/,_,g ;: 用 _ 替换 "all/"之后的 / 
;:" 同样的功能 
:s#all/\zs.*#\=substitute(submatch(0), '/', '_', 'g')#
:s#all/#&^M#|s#/#_#g|-j! ;" 查找断行，并合并为一行
;:" 在替换命令中使用替换 
:%s/.*/\='cp '.submatch(0).' all/'.substitute(submatch(0),'/','_','g')/
;:-----------------------------------------------------------------------------
;:" 全局显示命令 
:g/gladiolli/# ;: 查找并显示匹配的行号
:g/fred.*joe.*dick/ ;: 显示所有含有 fred,joe & dick的行
:g/\<fred\>/ ;: 显示单一单词fred
:g/^\s*$/d ;: 删除所有空行
:g!/^dd/d ;: 删除不含字符串''dd''的行
:v/^dd/d ;: 同上
:g/fred/,/joe/d ;: 删除所有的从fred到joe
:g/-------/.-10,.d ;: 以-------为标记删除之前的10行
:g/{/ ,/}/- s/\n\+/\r/g ;: 删除 之间的空行
:v/\S/d ;: 删除空行 
:v/./,/./-j ;: 压缩空行
:g/^$/,/./-j ;: 同上
:g/<input\|<form/p ;: 或运算
:g/^/put_ ;: 双倍行宽 (pu = put)
:g/^/m0 ;: 颠倒文件 (m = move)
:'a,'bg/^/m'b ;: 颠倒选中的 a 到 b
:g/^/t. ;: 重复行
:g/fred/t$ ;: 拷贝行从fred到结尾
:g/stage/t'a ;: 拷贝行从stage 到 marker a（a为标记的位置）
:g/\(^I[^^I]*\)\/d ;: 删除最少包含80个tab的行
;:" 隔行替换 
:g/^/ if line('.')%2|s/^/zz /
;:" 查找标记a与b 间所有包含 "somestr" 
;:" 复制所有"otherstr"后的行 
:'a,'bg/somestr/co/otherstr/ ;: co(py) or mo(ve)
:'a,'bg/str1/s/str1/&&&/|mo/str2/ ;" 范围同上，进行替换
:%norm jdd ;: 隔行删除
;:" 增加数字 (键入 <c-a>) ;#在MS-Windows中<c-a>已经被定义为全选
:.,$g/^\d/exe "norm! \<c-a>" ;: 增加从当前行首到结尾的数字
:'a,'bg/\d\+/norm! ^A ;: 增加数字
;:" 保存全局命令的结果 (注意必须使用添加模式) 你需要使用 qaq 清空寄存器a. 
;:"save results to a register/paste buffer 存储结果到 寄存器/粘贴 到 a
:g/fred/y A ;: 添加配备行到寄存器到 a
:g/fred/y A | :let @*=@a ;: 放入复制缓冲区
:let @a=''|g/Barratt/y A |:let @*=@a
:'a,'b g/^Error/ . w >> errors.txt ;" 将查找内容放入一个文件 (文件必须存在)
;:" 复制每一行，然后在复制出来的每一行两侧加上一个 print '复制出来的内容'
:g/./yank|put|-1s/'/"/g|s/.*/Print '&'/
;:" 用文件中的内容替换字符串，-d 表示删除“标记”
:g/^MARK$/r tmp.ex | -d
;:" 精致的显示方法 
:g/<pattern>/z#.5 ;: 带行号显示 
:g/<pattern>/z#.5|echo "==========" ;: 漂亮的显示 
;:" 用 g// 执行正常命令
:g/|/norm 2f|r* ;: 替换第二个|为* 
;:" 在新窗口中显示查找结果
:nmap <F3> :redir @a<CR>:g//<CR>:redir END<CR>:new<CR>:put! a<CR><CR>
;:-----------------------------------------------------------------------------
;:" 全局命令和替换命令联姻 (强大的编辑能力)
:'a,'bg/fred/s/joe/susan/gic ;: 可以使用反向引用来匹配
:g/fred/,/joe/s/fred/joe/gic ;: 非行模式 
;:-----------------------------------------------------------------------------
;:" 先找fred，然后找joe
:/fred/;/joe/-2,/sid/+3s/sally/alley/gIC
;:-----------------------------------------------------------------------------
;:" create a new file for each line offile eg 1.txt,2.txt,3,txt etc
;:" 将每一行的内容存成一个文件，文件名为 行号.txt 如 1.txt,2.txt 等
:g/^/exe ".w ".line(".").".txt"
;:-----------------------------------------------------------------------------
;:" 绝对精华 
;:-----------------------------------------------------------------------------
* # g* g# ;: 查找当前光标下的单词（单个单词） (<cword>) (向前/向后)
% ;: 匹配括号 {}[]()
. ;: 重复上次操作 
@: ;: 重复上次的命令
matchit.vim ;: 适%能匹配 <script> <?php等标记
<C-N><C-P> ;: 插入模式下自动完成填词
<C-X><C-L> ;: 行自动完成（超级有用）
/<C-R><C-W> ;: 把单个<cword>单词放入搜索或者命令行
/<C-R><C-A> ;: 把字符串中有的单词<CWORD>放入搜索或者命令行
:set ignorecase ;: 忽略大小写
:syntax on ;: 打开语法高亮 Perl,HTML,PHP 等等
:h regexp<C-D> ;: 按ctrl+d得到包含regexp的列表
;: (按tab自动不齐)
;:-----------------------------------------------------------------------------
;:" 简单编辑更新 _vimrc文件
:nmap ,s :source $VIM/_vimrc ;:普通模式下的键盘映射 ,s映射成加载用户目录下的_vimrc文件
:nmap ,v :e $VIM/_vimrc ;:,v映射成打开_vimrc文件
;:-----------------------------------------------------------------------------
;:#VISUAL 模式 (方便增加 HTML 标签)
:vmap sb "zdi<C-R>z<ESC> ;: 在 VISUALLY模式下将选中的文本前后分别加上
:vmap st "zdi<?= <C-R>z ?><ESC> ;: 加上 <?= ?>
;:-----------------------------------------------------------------------------
;:"vim 7 tabs 
vim -p fred.php joe.php ;: 在新tab中打开文件 
:tabe fred.php ;: 在新tab中打开 fred.php
:tab ball ;: 每一个文件一个tab 
;:" vim 7 .vimrc 配置使用tabs 
:nnoremap gf <C-W>gf
:cab e tabe
;:-----------------------------------------------------------------------------
;:" 浏览
:e . ;: 文件浏览器 
:Exp(lore) ;: 浏览文件
:Sex(plore) ;: 分割窗口浏览文件
:browse e ;: 打开windows 的 ‘选择文件’对话
:ls ;: 显示缓冲区
:cd .. ;: 设置当前目录位置
:args ;: 查看当前打开的所有文件
:args *.php ;: 打开所有 *.php文件 
:lcd %:p:h ;: 改变路径到当前编辑的文件
:autocmd BufEnter * lcd %:p:h ;: 放入.vimrc自动完成上面的命令
;:-----------------------------------------------------------------------------
;:" 缓冲区浏览(一直排名前10的vim脚本)
;:" 需要 bufexplorer.vim http://www.vim.org/script.php?script_id=42
\be ;: 缓冲浏览器中查看缓冲列表
\bs ;: 同上，但是分割窗口
;:-----------------------------------------------------------------------------
;:" 转换大小写
guu ;: 将正行的字母转换成小写
gUU ;: 将正行的字母转换成大写
Vu ;: 转换选中的行（小写）
VU ;: 转换选中的行（大写）
g~~ ;: 反向转换
vEU ;: 转换词大写
vE~ ;: 反向转换词
ggguG ;: 将当前编辑文件内容全部转换成小写
;:" Visually 模式下选择所有的字母及数字 (放入 .vimrc文件中)
vmap ,c :s/\<\(.\)\(\k*\)\>/\u\1\L\2/g<CR>
:%s/[.!?]\_s\+\a/\U&\E/g ;:" 大写所有句子的第一个字母
;:-----------------------------------------------------------------------------
gf ;: 打开当前光标下或后的文件
:nnoremap gF :view <cfile><cr> ;: 打开当前光标下或后的文件, 如果不存在则创建
ga ;: 显示当前光标下单个字的ascii,十进制，十六进制……
ggVGg? ;: 将整个文件用rot13编码……（谁看得懂啊~~hoho)
ggg?G ;: 同上 (针对大文件)
:8 | normal VGg? ;: 将第八行用rot13编码 
:normal 10GVGg? ;: 同上
<C-A>,<C-X> ;: 增加，减少当前光标下的数字
;: win32 用户需要重定义 CNTRL-A
<C-R>=5*5 ;: 插入25 (小型计算器)
;:-----------------------------------------------------------------------------
;:" 几个彩蛋……
:h 42 ;: also http://www.google.com/search?q=42
:h holy-grail
:h!
;:-----------------------------------------------------------------------------
;:" 标记 & 移动
'. ;: 跳回最后编辑的行 (超有用)
`. ;: 同上，但是定位编辑点
g; ;: 跳转到比较旧的编辑位置（如果有的话） (vim6.3后的新功能)
g, ;: 这个是较心的位置 (同上)
:changes :打出改变表
:h changelist ;: 查看“改变表跳转”的帮助
<C-O> ;: 依次沿着你的跳转记录向回跳 (从最近的一次开始)
<C-I> ;: 依次沿着你的跳转记录向前跳
:ju(mps) ;: 列出跳转轨迹
:help jump-motions
:history ;: 列出历史记录
:his c ;: 命令行历史
:his s ;: 搜索历史
q/ ;: 搜索命令历史的窗口
q: ;: 命令行命令历史的窗口
:<C-F> ;: 历史窗口
;:-----------------------------------------------------------------------------
;:" 缩写 & 映射
:map <f7> :'a,'bw! c:/aaa/x
:map <f8> :r c:/aaa/x
:map <f11> :.w! c:/aaa/xr<CR>
:map <f12> :r c:/aaa/xr<CR>
:ab php ;: 查看以php开头的缩写
:map , ;: 列出所有的映射（以逗号开始的）
;:" 允许映射 F10 (win32)
set wak=no ;: :h winaltkeys
;:" 映射中常使用的表示
<CR> ;: 回车
<ESC> ;: Esc
<LEADER> ;: 右斜杠
<BAR> ;: 管道符号
<BACKSPACE> ;: 退格键
<SILENT> ;: 不回显
#显示自定义的 RGB 颜色显示当前光标下的字符串 例如 #445588
:nmap <leader>c :hi Normal guibg=#<c-r>=expand("<cword>")<cr><cr>
:map <f2> /price only\\|versus/ :在map中需要用反斜线 \
;:-----------------------------------------------------------------------------
;:" 简单的 PHP 调试将所有显示的变量放入寄存器a
iab phpdb exit("<hr>Debug <C-R>a ");
;:-----------------------------------------------------------------------------
;:" 使用寄存器来映射 (放入 .vimrc文件自动加载)
:let @m=":'a,'bs/"
:let @s=":%!sort -u"
;:-----------------------------------------------------------------------------
;:" 列出寄存器
:reg ;: 显示当前所有的寄存器
:reg a ;: 显示寄存器a中的内容
;:"1p.... ;: 引用一个叫1的寄存器
:let @y='yy@"' ;: pre-loading registers (put in .vimrc)
qqq ;: 清空寄存器 "q"
;:-----------------------------------------------------------------------------
;:" 一些有用的决窍
;:"ayy@a ;: 把当前行作为命令执行
yy@" ;: 上面的匿名寄存器
u@. ;: 只执行键入的命令
;:-----------------------------------------------------------------------------
;:" 从其它命令处获得输入（需要外部命令）
:r!ls.exe ;: 从ls 获得输入插入到当前位置
!!date ;: 从date获得输入（删除当前行）
;:" 使用外部sort排序
:%!sort -u ;: 用sort排序整个文件（结果覆盖整个文件）
:'a,'b!sort -u ;: 从mark a到mark b之间的内容进行排序
!1} sort -u ;: 排序一个段落
:g/^$/;,/^$/-1!sort ;: 排序一个选中内容 ( ; 号非常重要)
;:-----------------------------------------------------------------------------
;:" 多文件管理 (基本的)
:bn ;: 跳转到下一个buffer
:bp ;: 跳转到前一个buffer
:wn ;: 保存当前buffer并跳转到下一个buffer (超有用)
:wp ;: 保存当前buffer并跳转到前一个buffer
:bd ;: 把当前文件从buffer移出 (超有用)
:bun ;: 卸载当前buffer (关闭这个窗口但是不移出)
:badd file.c ;: 添加file.c到buffer列表
:b 3 ;: 前往第三个 buffer
:b main ;: 前往含有main的buffer中 比如说 main.c
:sav php.html ;: 把当前文件存为php.html并打开
:sav! %<.bak ;: 换一个后缀名保存 (旧方法)
:sav! %:r.cfm ;: 同上
:sav %:s/fred/joe/ ;: 替换文件名
:sav %:s/fred/joe/:r.bak2 ;: 替换文件和后缀
:!mv % %:r.bak ;: 重命名当前文件
:help filename-modifiers
:e! ;: 打开未修改之前的文件
:w c:/aaa/% ;: 存储文件到指定位置
:e # ;: 编辑标记为#的文件在buffer中
:rew ;: 返回到第一个可编辑的文件
:brew ;: 回到第一个buffer
:sp fred.txt ;: 分割窗口打开fred.txt
:sball,:sb ;: 把所有的 buffers分割显示在一个窗口中 (超有用)
:scrollbind ;: in each split window
:map <F5> :ls<CR>:e # ;: 按F5显示所有buffer, 并显示行号
:set hidden ;: 允许不保存当前buffer而进行切换
;:-----------------------------------------------------------------------------
;:" 在分割窗口中快速切换
map <C-J> <C-W>j<C-W>_
map <C-K> <C-W>k<C-W>_
;:-----------------------------------------------------------------------------
;:" 录制命令 (最好的技巧)
qq ;:# 录制命令放入 q寄存器
.. ;:输入一些命令
q ;:# 录制结束 
@q ;:执行放入寄存器q中的内容
@@ ;:重复
5@@ ;:重复5次
;:" 编辑一个 寄存器/录制
"qp ;:显示寄存器q中的内容(普通模式下)
<ctrl-R>q ;:显示寄存器q中的内容 (插入模式下)
;:" 你现在可以看到记录内容，随便编辑
"qdd ;:删除，重新存入q
@q ;:执行 录制/寄存器 q
;:" 在可视块中运行记录
;:1) 定义记录/寄存器
qq:s/ to/ from/g^Mq
;:2) 定义可视块
V}
;:3) 键入 ;: 将显示下面信息
:'<,'>
;:4)完成如下操作
:'<,'>norm @q
;:-----------------------------------------------------------------------------
;:"宏记录的map (命令方式结束)
nnoremap ] @q:w!<bar>bd



1. manual //手工定义折叠
2. indent //用缩进表示折叠
3. expr　 //用表达式来定义折叠
4. syntax //用语法高亮来定义折叠
5. diff   //对没有更改的文本进行折叠
6. marker //用标志折叠

indent折叠命令
indent方式，vim会自动利用缩进进行折叠，我们可以使用现成的折叠成果．
我们可以在折叠处输入以下命令：

zc 折叠
zC 对所在范围内所有嵌套的折叠点进行折叠
zo 展开折叠
zO 对所在范围内所有嵌套的折叠点展开
[z 到当前打开的折叠的开始处。
]z 到当前打开的折叠的末尾处。
zj 向下移动。到达下一个折叠的开始处。关闭的折叠也被计入。
zk 向上移动到前一折叠的结束处。关闭的折叠也被计入。

marker折叠命令
marker折叠方式时，我们需要用标计来标识代码的折叠，系统默认是{{{和}}}
折叠命令

zf　创建折叠，比如在marker方式下：
        zf56G，创建从当前行起到56行的代码折叠；
        10zf或10zf+或zf10↓，创建从当前行起到后10行的代码折叠。
        10zf-或zf10↑，创建从当前行起到之前10行的代码折叠。
        在括号处zf%，创建从当前行起到对应的匹配的括号上去（（），{}，[]，<>等）。
zd  删除 (delete) 在光标下的折叠。仅当 'foldmethod' 设为 "manual" 或 "marker" 时有效。
zD  循环删除 (Delete) 光标下的折叠，即嵌套删除折叠。仅当 'foldmethod' 设为 "manual" 或 "marker" 时有效。
zE  除去 (Eliminate) 窗口里“所有”的折叠。仅当 'foldmethod' 设为 "manual" 或 "marker" 时有效。

